globalThis.getOriginStorageAccess=async r=>{let e=await globalThis.indexedDB.databases(),t=e.find(r=>"AXT-AyaKoto/OriginStorages.js"==r.name)?.version||1,o=globalThis.indexedDB.open("AXT-AyaKoto/OriginStorages.js",t),s=await new Promise((r,e)=>{o.onsuccess=()=>{r(o.result)},o.onerror=()=>{e(o.error)}}),a=s.objectStoreNames;s.close();let n=a.contains(r),i=n?t:t+1,c=globalThis.indexedDB.open("AXT-AyaKoto/OriginStorages.js",i);c.onupgradeneeded=e=>{let t=e.target.result;t.createObjectStore(r,{keyPath:"key"})};let g=await new Promise((r,e)=>{c.onsuccess=()=>{r(c.result)},c.onerror=()=>{e(c.error)}});return new OriginStorage(g,r)};const OriginStorage=class{constructor(r,e){this.DB=r,this.storageName=e}keys(r){return new Promise((e,t)=>{let o=this.DB.transaction(this.storageName,"readonly");o.onerror=r=>{throw Error("Transaction Error")};let s=o.objectStore(this.storageName),a=s.getAll();a.onsuccess=t=>{e(t.target?.result?.[r]?.key)},a.onerror=r=>{t(r.target.error)}})}setItem(r,e){return new Promise((t,o)=>{let s=this.DB.transaction(this.storageName,"readwrite");s.onerror=r=>{throw Error("Transaction Error")};let a=s.objectStore(this.storageName),n=a.put({key:r,value:e});n.onsuccess=r=>{t(void 0)},n.onerror=r=>{o(r.target.error)}})}getItem(r){return new Promise((e,t)=>{let o=this.DB.transaction(this.storageName,"readonly");o.onerror=r=>{throw Error("Transaction Error")};let s=o.objectStore(this.storageName),a=s.get(r);a.onsuccess=r=>{e(r.target.result)},a.onerror=r=>{t(r.target.error)}})}removeItem(r){return new Promise((e,t)=>{let o=this.DB.transaction(this.storageName,"readwrite");o.onerror=r=>{throw Error("Transaction Error")};let s=o.objectStore(this.storageName),a=s.delete(r);a.onsuccess=r=>{e(void 0)},a.onerror=r=>{t(r.target.error)}})}clear(){return new Promise((r,e)=>{let t=this.DB.transaction(this.storageName,"readwrite");t.onerror=r=>{throw Error("Transaction Error")};let o=t.objectStore(this.storageName),s=o.clear();s.onsuccess=e=>{r(void 0)},s.onerror=r=>{e(r.target.error)}})}get length(){return new Promise((r,e)=>{let t=this.DB.transaction(this.storageName,"readonly");t.onerror=r=>{throw Error("Transaction Error")};let o=t.objectStore(this.storageName),s=o.count();s.onsuccess=e=>{r(e.target.result)},s.onerror=r=>{e(r.target.error)}})}close(){return new Promise((r,e)=>{this.DB.close(),r(void 0)})}};
